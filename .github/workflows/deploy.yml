name: Deploy EditEngine to Toolforge

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  TOOL_NAME: editengine

jobs:
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Node.js dependencies
        run: |
          cd client/frontend
          npm ci

      - name: Build frontend
        run: |
          cd client/frontend
          npm run build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TOOLFORGE_SSH_KEY }}

      - name: Deploy to Toolforge
        uses: appleboy/ssh-action@v1
        with:
          host: login.toolforge.org
          username: ${{ secrets.TOOLFORGE_USERNAME }}
          key: ${{ secrets.TOOLFORGE_SSH_KEY }}
          port: 22
          request_pty: true
          envs: GITHUB_SHA,SECRET_KEY,CELERY_ENCRYPTION_KEY,DEBUG,DJANGO_WORKERS,DJANGO_MAX_REQUESTS,CELERY_WORKER_CONCURRENCY,CELERY_PARAGRAPH_BATCH_SIZE,CELERY_WORKER_POOL,CELERY_MAX_TASKS_PER_CHILD
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CELERY_ENCRYPTION_KEY: ${{ secrets.CELERY_ENCRYPTION_KEY }}
          DEBUG: ${{ vars.DEBUG }}
          DJANGO_WORKERS: ${{ vars.DJANGO_WORKERS || '2' }}
          DJANGO_MAX_REQUESTS: ${{ vars.DJANGO_MAX_REQUESTS || '1000' }}
          CELERY_WORKER_CONCURRENCY: ${{ vars.CELERY_WORKER_CONCURRENCY || '1' }}
          CELERY_PARAGRAPH_BATCH_SIZE: ${{ vars.CELERY_PARAGRAPH_BATCH_SIZE || '3' }}
          CELERY_WORKER_POOL: ${{ vars.CELERY_WORKER_POOL || 'prefork' }}
          CELERY_MAX_TASKS_PER_CHILD: ${{ vars.CELERY_MAX_TASKS_PER_CHILD || '100' }}
          script: |
            become ${{ env.TOOL_NAME }} '
              set -euo pipefail

              # Sync secrets (only if GitHub secret is provided)
              if [ -n "${SECRET_KEY:-}" ]; then
                toolforge envvars create SECRET_KEY "$SECRET_KEY"
              fi
              if [ -n "${CELERY_ENCRYPTION_KEY:-}" ]; then
                toolforge envvars create CELERY_ENCRYPTION_KEY "$CELERY_ENCRYPTION_KEY"
              fi

              # Sync non-sensitive environment variables (only if GitHub variable is provided)
              if [ -n "${DEBUG:-}" ]; then
                toolforge envvars create DEBUG "$DEBUG"
              fi
              if [ -n "${DJANGO_WORKERS:-}" ]; then
                toolforge envvars create DJANGO_WORKERS "$DJANGO_WORKERS"
              fi
              if [ -n "${DJANGO_MAX_REQUESTS:-}" ]; then
                toolforge envvars create DJANGO_MAX_REQUESTS "$DJANGO_MAX_REQUESTS"
              fi
              if [ -n "${CELERY_WORKER_CONCURRENCY:-}" ]; then
                toolforge envvars create CELERY_WORKER_CONCURRENCY "$CELERY_WORKER_CONCURRENCY"
              fi
              if [ -n "${CELERY_PARAGRAPH_BATCH_SIZE:-}" ]; then
                toolforge envvars create CELERY_PARAGRAPH_BATCH_SIZE "$CELERY_PARAGRAPH_BATCH_SIZE"
              fi
              if [ -n "${CELERY_WORKER_POOL:-}" ]; then
                toolforge envvars create CELERY_WORKER_POOL "$CELERY_WORKER_POOL"
              fi
              if [ -n "${CELERY_MAX_TASKS_PER_CHILD:-}" ]; then
                toolforge envvars create CELERY_MAX_TASKS_PER_CHILD "$CELERY_MAX_TASKS_PER_CHILD"
              fi

              # Build application using Build Service
              echo "Starting build from repository..."
              if ! toolforge build start https://github.com/${{ github.repository }}; then
                echo "ERROR: Failed to start build"
                exit 1
              fi

              # Wait for build completion with better error handling
              echo "Waiting for build to complete..."
              build_timeout=600  # 10 minutes
              elapsed=0
              build_started=false

              while [ $elapsed -lt $build_timeout ]; do
                if toolforge build show 2>&1 | grep -q "No builds exist yet"; then
                  if [ "$build_started" = false ]; then
                    echo "Build not started yet, waiting..."
                  else
                    echo "ERROR: Build disappeared"
                    exit 1
                  fi
                else
                  build_started=true
                  build_status=$(toolforge build show 2>/dev/null || echo "unknown")
                  if echo "$build_status" | grep -q "ok (Succeeded)"; then
                    echo "Build completed successfully"
                    break
                  elif echo "$build_status" | grep -q "failed"; then
                    echo "Build failed - showing logs:"
                    toolforge build logs
                    exit 1
                  fi
                fi
                sleep 10
                elapsed=$((elapsed + 10))
              done

              if [ $elapsed -ge $build_timeout ]; then
                echo "Build timed out after $build_timeout seconds"
                toolforge build logs
                exit 1
              fi

              # Create database if it does not exist (idempotent)
              # Get database credentials from replica.my.cnf
              DB_USER=$(grep "^user" ~/replica.my.cnf | cut -d= -f2 | tr -d ' ')
              DB_PASS=$(grep "^password" ~/replica.my.cnf | cut -d= -f2 | tr -d ' ')
              DB_NAME="${DB_USER}__editengine"
              echo "Creating database: $DB_NAME"
              mysql -h tools.db.svc.wikimedia.cloud -u "$DB_USER" -p"$DB_PASS" -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || true

              # Run migrations
              echo "Running database migrations..."
              toolforge jobs run migrate-${{ github.run_id }} \
                --image tool-editengine/tool-editengine:latest \
                --command "migrate" \
                --wait \
                --mount=all

              # Collect static files
              echo "Collecting static files..."
              toolforge jobs run collectstatic-${{ github.run_id }} \
                --image tool-editengine/tool-editengine:latest \
                --command "collectstatic" \
                --wait \
                --mount=all

              # Check job status
              echo "Checking collectstatic job status..."
              toolforge jobs logs collectstatic-${{ github.run_id }} || true

              # Deploy web service (idempotent)
              echo "Deploying web service..."
              if toolforge webservice status | grep -q "running"; then
                echo "Stopping existing webservice..."
                toolforge webservice stop
                sleep 5
              fi

              echo "Starting webservice..."
              toolforge webservice buildservice start --cpu=1 --mem=1Gi --mount=all

              # Wait for service to start
              echo "Waiting for webservice to start..."
              sleep 30

              # Check webservice logs
              echo "Checking webservice logs..."
              toolforge webservice buildservice logs --tail 50

              # Check status
              if toolforge webservice status | grep -q "running"; then
                echo "Webservice is running"
              else
                echo "ERROR: Webservice failed to start"
                toolforge webservice buildservice logs
                exit 1
              fi

              # Deploy Celery workers (idempotent)
              echo "Deploying Celery workers..."
              if toolforge jobs list | grep -q "celery-worker"; then
                toolforge jobs delete celery-worker || true
                sleep 5
              fi

              toolforge jobs run celery-worker \
                --image tool-editengine/tool-editengine:latest \
                --command "celery-worker" \
                --continuous \
                --mem 2Gi \
                --cpu 1 \
                --replicas 2

              # Deploy Celery beat scheduler (idempotent)
              echo "Deploying Celery beat scheduler..."
              if toolforge jobs list | grep -q "celery-beat"; then
                toolforge jobs delete celery-beat || true
                sleep 5
              fi

              toolforge jobs run celery-beat \
                --image tool-editengine/tool-editengine:latest \
                --command "celery-beat" \
                --continuous \
                --mem 512Mi

              echo "Deployment completed successfully"
            '

      - name: Verify deployment
        run: |
          echo "Waiting for services to start..."
          sleep 90  # Give services time to start

          # Check if the service is responding
          echo "Checking service health..."
          if curl -f -s -o /dev/null -w "%{http_code}" https://editengine.toolforge.org/ | grep -q "200\|301\|302"; then
            echo "✅ Deployment verified successfully"
          else
            echo "❌ Service check failed. Response code:"
            curl -s -o /dev/null -w "%{http_code}\n" https://editengine.toolforge.org/
            echo "Trying API endpoint..."
            curl -I https://editengine.toolforge.org/api/
            exit 1
          fi
