"""Django settings for EditEngine project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

# Load environment variables
# If running tests, prefer .env.test over .env
if "test" in sys.argv or "pytest" in sys.modules:
    test_env_path = Path(__file__).resolve().parent.parent / ".env.test"
    if test_env_path.exists():
        load_dotenv(test_env_path, override=True)
    else:
        load_dotenv(override=True)
else:
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")

if not SECRET_KEY:
    raise ImproperlyConfigured(
        "The SECRET_KEY environment variable must not be empty."
    )

ALLOWED_HOSTS = [
    "editengine.toolforge.org",
    "localhost",
    "0.0.0.0",
]

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "https://editengine.toolforge.org",
    "http://localhost:5173",  # Vite dev server
    "http://localhost:8000",  # Django dev server
]

# Additional CORS settings for production
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "django_vite",
    "corsheaders",
    "api.apps.ApiConfig",
    "services.apps.ServicesConfig",
    "data.apps.DataConfig",
    "client",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EditEngine.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "EditEngine.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Get database credentials from environment
DB_PASSWORD = os.environ.get("DB_PASSWORD")
if not DB_PASSWORD and "test" not in sys.argv and "pytest" not in sys.modules:
    raise ImproperlyConfigured(
        "The DB_PASSWORD environment variable must not be empty for production use."
    )

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "editengine"),
        "USER": os.environ.get("DB_USER", "editengine_user"),
        "PASSWORD": DB_PASSWORD or "",
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
        "OPTIONS": {
            "sslmode": "prefer",
        },
    }
}

# Use SQLite for testing to avoid PostgreSQL connection issues
if "test" in sys.argv or "pytest" in sys.modules:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Django-Vite settings
VITE_APP_DIR = os.path.join(BASE_DIR, "client", "frontend")

DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
        "dev_server_host": "localhost",
        "dev_server_port": 5173,
    }
}

STATICFILES_DIRS = [
    os.path.join(VITE_APP_DIR, "dist"),
    os.path.join(VITE_APP_DIR, "public"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django Rest Framework settings
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "api.exceptions.custom_exception_handler",
}


# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "EditEngine API",
    "DESCRIPTION": "API for editing Wiki content using AI",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# Celery Configuration
# PostgreSQL is used as both message broker and result backend
CELERY_BROKER_URL = f"sqla+postgresql://{os.environ.get('DB_USER')}:{DB_PASSWORD or ''}@{os.environ.get('DB_HOST', 'localhost')}:{os.environ.get('DB_PORT', '5432')}/{os.environ.get('DB_NAME')}"
CELERY_RESULT_BACKEND = f"db+postgresql://{os.environ.get('DB_USER')}:{DB_PASSWORD or ''}@{os.environ.get('DB_HOST', 'localhost')}:{os.environ.get('DB_PORT', '5432')}/{os.environ.get('DB_NAME')}"

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_ALWAYS_EAGER = False  # Ensure tasks run asynchronously
CELERY_TASK_EAGER_PROPAGATES = True  # Propagate exceptions in eager mode
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # Retry connections during startup

# SQLAlchemy broker settings - these options are not supported by SQLAlchemy transport

# Database result backend settings
CELERY_DATABASE_CREATE_TABLES_AT_SETUP = True
CELERY_DATABASE_ENGINE_OPTIONS = {
    "echo": DEBUG,  # Log SQL queries in debug mode
    "pool_pre_ping": True,
    "pool_recycle": 300,
}

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Use HTTPS in production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for Vite HMR in development
    "'unsafe-eval'" if DEBUG else "",  # Only allow eval in development
)
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for inline styles
)
CSP_IMG_SRC = (
    "'self'",
    "data:",  # Allow data URIs for images
    "https:",  # Allow images from HTTPS sources
)
CSP_FONT_SRC = ("'self'",)
CSP_CONNECT_SRC = (
    "'self'",
    "ws://localhost:5173" if DEBUG else "",  # Vite WebSocket in development
    "http://localhost:5173" if DEBUG else "",  # Vite dev server
)
CSP_FRAME_ANCESTORS = ("'none'",)  # Prevent clickjacking
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'",)
