"""Django settings for EditEngine project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

# Load environment variables
# If running tests, prefer .env.test over .env
if "test" in sys.argv or "pytest" in sys.modules:
    test_env_path = Path(__file__).resolve().parent.parent / ".env.test"
    if test_env_path.exists():
        load_dotenv(test_env_path, override=True)
    else:
        load_dotenv(override=True)
else:
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower() in ("true", "1", "t")

# Allow build-time operations without SECRET_KEY (for Heroku buildpack compatibility)
if not SECRET_KEY:
    # Check if we're in a build environment (collectstatic, migrate, etc.)
    import sys
    build_commands = ["collectstatic", "migrate", "help", "check"]
    is_build_command = any(cmd in sys.argv for cmd in build_commands)

    if is_build_command:
        # Use a temporary secret key for build operations
        SECRET_KEY = "build-time-secret-key-not-for-production-use"
    else:
        raise ImproperlyConfigured("The SECRET_KEY environment variable must not be empty.")

ALLOWED_HOSTS = [
    "editengine.toolforge.org",
    ".toolforge.org",  # Add wildcard for all toolforge subdomains
    "localhost",
    "127.0.0.1",
    "0.0.0.0",
]

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "https://editengine.toolforge.org",
    "http://localhost:5173",  # Vite dev server
    "http://localhost:8000",  # Django dev server
]

# CSRF trusted origins for Django 4.0+ behind proxy
CSRF_TRUSTED_ORIGINS = [
    "https://editengine.toolforge.org",
    "https://*.toolforge.org",
]

# Additional CORS settings for production
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "django_vite",
    "corsheaders",
    "api.apps.ApiConfig",
    "services.apps.ServicesConfig",
    "data.apps.DataConfig",
    "client",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "EditEngine.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "EditEngine.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Get database credentials from environment
if "test" not in sys.argv and "pytest" not in sys.modules:
    # Production - support both custom env vars and Toolforge native vars
    DB_PASSWORD = os.environ.get("DB_PASSWORD") or os.environ.get("TOOL_TOOLSDB_PASSWORD")
    DB_NAME = os.environ.get("DB_NAME") or f"{os.environ.get('TOOL_TOOLSDB_USER', '')}__editengine"
    DB_USER = os.environ.get("DB_USER") or os.environ.get("TOOL_TOOLSDB_USER")
    DB_HOST = os.environ.get("DB_HOST", "tools.db.svc.wikimedia.cloud")
    DB_PORT = os.environ.get("DB_PORT", "3306")
    DB_CONN_MAX_AGE = int(os.environ.get("DB_CONN_MAX_AGE", "0"))
else:
    # Test environment can use defaults
    DB_PASSWORD = ""
    DB_NAME = "test_db"
    DB_USER = "test_user"
    DB_HOST = "localhost"
    DB_PORT = "3306"
    DB_CONN_MAX_AGE = 0

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "CONN_MAX_AGE": DB_CONN_MAX_AGE,
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
        },
    }
}

# For Toolforge deployment, use replica.my.cnf if available
if os.environ.get("TOOL_TOOLSDB_USER"):
    replica_config_path = os.path.expanduser("~/replica.my.cnf")
    if os.path.exists(replica_config_path):
        db_options = DATABASES["default"]["OPTIONS"]
        if isinstance(db_options, dict):
            db_options["read_default_file"] = replica_config_path

# Use SQLite for testing to avoid MariaDB connection issues
if "test" in sys.argv or "pytest" in sys.modules:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Static files storage with WhiteNoise for efficient serving
# Using modern STORAGES configuration (Django 4.2+)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# WhiteNoise configuration for Toolforge
WHITENOISE_AUTOREFRESH = False  # Important for production
WHITENOISE_COMPRESS_OFFLINE = True
# Don't store the original (un-hashed filename) version of static files, to reduce slug size
WHITENOISE_KEEP_ONLY_HASHED_FILES = True

# Django-Vite settings for version 2.1.3
VITE_APP_DIR = os.path.join(BASE_DIR, "client", "frontend")

# Required by django-vite 2.x
DJANGO_VITE_ASSETS_PATH = os.path.join(VITE_APP_DIR, "dist")

DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
        "dev_server_host": "localhost",
        "dev_server_port": 5173,
    }
}

STATICFILES_DIRS = [
    os.path.join(VITE_APP_DIR, "dist"),
    os.path.join(VITE_APP_DIR, "public"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django Rest Framework settings
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "api.exceptions.custom_exception_handler",
}


# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "EditEngine API",
    "DESCRIPTION": "API for editing Wiki content using AI",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# Celery Configuration
# Redis is used as both message broker and result backend
if "test" not in sys.argv and "pytest" not in sys.modules:
    # Production - support both custom env vars and Toolforge native TOOL_REDIS_URI
    if os.environ.get("TOOL_REDIS_URI"):
        # Use Toolforge's native Redis URI if available
        import urllib.parse
        parsed = urllib.parse.urlparse(os.environ["TOOL_REDIS_URI"])
        REDIS_HOST = parsed.hostname or "tools-redis"
        REDIS_PORT = str(parsed.port or 6379)
        REDIS_DB = parsed.path.lstrip('/') or "0"
        REDIS_PASSWORD = parsed.password or ""
    else:
        # Fall back to custom environment variables
        REDIS_HOST = os.environ.get("REDIS_HOST", "tools-redis")
        REDIS_PORT = os.environ.get("REDIS_PORT", "6379")
        REDIS_DB = os.environ.get("REDIS_DB", "0")
        REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "")
else:
    # Test environment defaults
    REDIS_HOST = "localhost"
    REDIS_PORT = "6379"
    REDIS_DB = "0"
    REDIS_PASSWORD = ""

if REDIS_PASSWORD:
    CELERY_BROKER_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
else:
    CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

# No result backend - we persist results directly to MariaDB
CELERY_RESULT_BACKEND = None

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_ALWAYS_EAGER = False  # Ensure tasks run asynchronously
CELERY_TASK_EAGER_PROPAGATES = True  # Propagate exceptions in eager mode
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # Retry connections during startup

# Redis-specific settings
# Celery performance settings from environment variables
try:
    CELERY_WORKER_CONCURRENCY = int(os.environ.get("CELERY_WORKER_CONCURRENCY", "1"))
except ValueError as e:
    raise ImproperlyConfigured("The CELERY_WORKER_CONCURRENCY environment variable must be an integer.") from e

try:
    CELERY_PARAGRAPH_BATCH_SIZE = int(os.environ.get("CELERY_PARAGRAPH_BATCH_SIZE", "3"))
except ValueError as e:
    raise ImproperlyConfigured("The CELERY_PARAGRAPH_BATCH_SIZE environment variable must be an integer.") from e

CELERY_REDIS_MAX_CONNECTIONS = 20
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "visibility_timeout": 3600,  # 1 hour
    "fanout_prefix": True,
    "fanout_patterns": True,
}

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Use HTTPS in production
if not DEBUG:
    # Don't force HTTPS redirect on Toolforge (proxy handles SSL termination)
    SECURE_SSL_REDIRECT = False
    # Disable secure cookies on Toolforge - the proxy handles SSL but Django may not detect it correctly
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    # Disable HSTS on Toolforge - let the proxy handle security headers
    # SECURE_HSTS_SECONDS = 31536000  # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True

    # Proxy configuration for Toolforge SSL termination
    # Commenting out these settings to fix infinite redirect on Toolforge
    # USE_X_FORWARDED_HOST = True
    # USE_X_FORWARDED_PORT = True
    # USE_X_FORWARDED_FOR = True  # Additional forwarding behavior for Toolforge
    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Toolforge-specific settings
# FORCE_SCRIPT_NAME = ''  # Commented out - was causing redirect issues

# Note: Removed APPEND_SLASH = False to use Django's default (True)
# The default behavior should work correctly now that proxy settings are fixed

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for Vite HMR in development
    "'unsafe-eval'" if DEBUG else "",  # Only allow eval in development
)
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for inline styles
)
CSP_IMG_SRC = (
    "'self'",
    "data:",  # Allow data URIs for images
    "https:",  # Allow images from HTTPS sources
)
CSP_FONT_SRC = ("'self'",)
CSP_CONNECT_SRC = (
    "'self'",
    "ws://localhost:5173" if DEBUG else "",  # Vite WebSocket in development
    "http://localhost:5173" if DEBUG else "",  # Vite dev server
)
CSP_FRAME_ANCESTORS = ("'none'",)  # Prevent clickjacking
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'",)

# Deployment Configuration
# These variables are used by deployment scripts and process managers
# All deployment configuration must be explicitly set via environment variables
try:
    DJANGO_WORKERS = int(os.environ.get("DJANGO_WORKERS", "2"))
except ValueError as e:
    raise ImproperlyConfigured("The DJANGO_WORKERS environment variable must be an integer.") from e

try:
    DJANGO_MAX_REQUESTS = int(os.environ.get("DJANGO_MAX_REQUESTS", "1000"))
except ValueError as e:
    raise ImproperlyConfigured("The DJANGO_MAX_REQUESTS environment variable must be an integer.") from e

try:
    CELERY_MAX_TASKS_PER_CHILD = int(os.environ.get("CELERY_MAX_TASKS_PER_CHILD", "100"))
except ValueError as e:
    raise ImproperlyConfigured("The CELERY_MAX_TASKS_PER_CHILD environment variable must be an integer.") from e

# Worker pool implementation is set via command line -P flag only (not Celery settings)
# See management command for pool configuration
